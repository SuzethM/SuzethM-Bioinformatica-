# -*- coding: utf-8 -*-
"""Proyecto Bioinformatica

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PAzs7bn5CwRw2MpK3U3Nb2T_1MnFMlVu
"""

# Instalar las dependencias necesarias en tu entorno
# Ejecuta en la terminal: pip install streamlit biopython

import streamlit as st
from Bio.Seq import Seq
from Bio.SeqUtils import seq3

# Funci칩n para procesar secuencias de ADN/ARN
def analyze_dna(sequence):
    try:
        # Convertir la secuencia a un objeto Bio.Seq
        sequence = Seq(sequence.strip().upper())
        
        # Validar si la secuencia contiene solo bases v치lidas
        if not all(base in "ACGTU" for base in sequence):
            return "**Error:** La secuencia contiene caracteres no v치lidos. Solo se permiten A, C, G, T, U."
        
        # C치lculos b치sicos
        length = len(sequence)
        gc_content = 100 * (sequence.count("G") + sequence.count("C")) / length
        complement = sequence.complement()
        transcribed = sequence.transcribe() if "T" in sequence else "No aplica (ARN)"

        # Devolver resultados como texto formateado
        return f"""
        ### Resultados del an치lisis de ADN/ARN:
        - **Longitud de la secuencia:** {length} bases
        - **Contenido GC:** {gc_content:.2f}%
        - **Complemento:** {complement}
        - **Transcripci칩n:** {transcribed}
        """
    except Exception as e:
        return f"**Error:** Ocurri칩 un problema al procesar la secuencia. Detalles: {str(e)}"

# Funci칩n para procesar secuencias de prote칤nas
def analyze_protein(sequence):
    try:
        # Convertir la secuencia a un objeto Bio.Seq
        sequence = Seq(sequence.strip().upper())
        
        # Validar si la secuencia contiene solo residuos de amino치cidos v치lidos
        if not all(residue in "ACDEFGHIKLMNPQRSTVWY" for residue in sequence):
            return "**Error:** La secuencia contiene caracteres no v치lidos. Usa el formato de una letra para amino치cidos."

        # C치lculos b치sicos
        length = len(sequence)
        hydrophobic = sum(sequence.count(res) for res in "AILMFWV")
        hydrophilic = sum(sequence.count(res) for res in "RNDQEGKH")
        seq_three_letter = seq3(str(sequence))

        # Devolver resultados como texto formateado
        return f"""
        ### Resultados del an치lisis de prote칤nas:
        - **Longitud de la secuencia:** {length} amino치cidos
        - **Residuos hidrof칩bicos:** {hydrophobic} ({100 * hydrophobic / length:.2f}%)
        - **Residuos hidrof칤licos:** {hydrophilic} ({100 * hydrophilic / length:.2f}%)
        - **Secuencia en formato de tres letras:** {seq_three_letter}
        """
    except Exception as e:
        return f"**Error:** Ocurri칩 un problema al procesar la secuencia. Detalles: {str(e)}"

# Configuraci칩n de la interfaz en Streamlit
st.title("游댧 An치lisis de Secuencias Biol칩gicas")

# Selecci칩n del tipo de an치lisis
analysis_type = st.radio("Selecciona el tipo de an치lisis:", ["An치lisis de ADN/ARN", "An치lisis de Prote칤nas"])

# Entrada de la secuencia
sequence = st.text_area("Introduce la secuencia aqu칤:", height=150)

# Validaci칩n antes de procesar
if st.button("Analizar"):
    if not sequence.strip():
        st.error("丘멆잺 Por favor, introduce una secuencia para analizar.")
    else:
        # Mostrar resultados seg칰n el tipo de an치lisis seleccionado
        if analysis_type == "An치lisis de ADN/ARN":
            st.markdown(analyze_dna(sequence))
        else:
            st.markdown(analyze_protein(sequence))
